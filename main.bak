#lang racket/gui

; tamaño del grid (filas = columnas)
(define GRID 10)
; tamaño de cada botón (px)
(define CELL 35)

; ---------------------------
; MATRIZ ASOCIADA AL GRID
; mat : lista de listas (filas)
; cada celda contiene su propia coordenada como lista '(r c)
(define mat
  (for/list ([r (in-range GRID)])
    (for/list ([c (in-range GRID)])
      (list r c))))

; helper para leer un valor de la matriz (por si luego cambias la representación)
(define (mat-ref m r c)
  (list-ref (list-ref m r) c))

; ---------------------------
; UI

(define frame
  (new frame%
       [label "Minesweeper"]
       [stretchable-width #f]
       [stretchable-height #f]))

; panel raíz
(define root
  (new vertical-panel%
       [parent frame]
       [spacing 0]
       [horiz-margin 0]
       [vert-margin 0]
       [stretchable-width #f]
       [stretchable-height #f]))

(for ([r (in-range GRID)])
  (define row
    (new horizontal-panel%
         [parent root]
         [spacing 0]
         [horiz-margin 0]
         [vert-margin 0]
         [stretchable-width #f]
         [stretchable-height #f]))
  (for ([c (in-range GRID)])
    (define this-val (mat-ref mat r c)) ; valor vinculado a este botón
    (new button%
         [parent row]
         [label ""]  ; sin texto

         ; mantener cuadrados
         [min-width  CELL]
         [min-height CELL]

         ; no estirables
         [stretchable-width #f]
         [stretchable-height #f]

         ; callback: imprime el valor de la matriz para este botón
         [callback
          (λ (_btn _evt)
            (printf "Click en r=~a, c=~a -> valor: ~a\n"
                    r c this-val)))])))

; ajustar ventana (bordes mínimos)
(send frame resize (+ 2 (* GRID CELL)) (+ 2 (* GRID CELL)))
(send frame show #t)